/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type ContentBlock = {
  _type: "content-block";
  padding?: SectionPadding;
  colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
  sectionWidth?: "default" | "narrow";
  stackAlign?: "left" | "center";
  tagLine?: string;
  title?: string;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      isExternal?: boolean;
      internalLink?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      href?: string;
      target?: boolean;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  } | {
    url?: string;
    _type: "youtube";
    _key: string;
  } | {
    _key: string;
  } & Code>;
};

export type Team1 = {
  _type: "team-1";
  padding?: SectionPadding;
  colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
  heading?: string;
  description?: string;
  members?: Array<{
    name?: string;
    role?: string;
    avatar?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    socialLinks?: Array<{
      _key: string;
    } & SocialLink>;
    _type: "teamMember";
    _key: string;
  }>;
};

export type FeaturesCard = {
  _type: "features-card";
  mediaType?: "image" | "icon";
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  icon?: string;
  tagLine?: string;
  title?: string;
  description?: string;
  links?: Array<{
    _key: string;
  } & Link>;
};

export type FeaturesCards = {
  _type: "features-cards";
  padding?: SectionPadding;
  colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
  tagLine?: string;
  title?: string;
  description?: string;
  layout?: "grid" | "masonry";
  cards?: Array<{
    _key: string;
  } & FeaturesCard>;
};

export type GalleryLightbox = {
  _type: "gallery-lightbox";
  padding?: SectionPadding;
  colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
  tagLine?: string;
  title?: string;
  description?: string;
  columns?: "grid-cols-2" | "grid-cols-3" | "grid-cols-4";
  spacing?: "gap-2" | "gap-4" | "gap-6" | "gap-8";
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    caption?: string;
    _type: "image";
    _key: string;
  }>;
};

export type FeaturedProjects = {
  _type: "featured-projects";
  padding?: SectionPadding;
  colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
  title?: string;
  projects?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "project";
  }>;
  showViewAllButton?: boolean;
  viewAllButtonText?: string;
  viewAllButtonVariant?: "default" | "destructive" | "outline" | "secondary" | "ghost" | "link";
};

export type AllPosts = {
  _type: "all-posts";
  padding?: SectionPadding;
  colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
};

export type FormNewsletter = {
  _type: "form-newsletter";
  padding?: SectionPadding;
  colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
  stackAlign?: "left" | "center";
  consentText?: string;
  buttonText?: string;
  successMessage?: string;
};

export type Faqs = {
  _type: "faqs";
  padding?: SectionPadding;
  colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
  faqs?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "faq";
  }>;
};

export type LogoCloud1 = {
  _type: "logo-cloud-1";
  padding?: SectionPadding;
  colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
  title?: string;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
};

export type Cta1 = {
  _type: "cta-1";
  padding?: SectionPadding;
  colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
  sectionWidth?: "default" | "narrow";
  stackAlign?: "left" | "center";
  tagLine?: string;
  title?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      isExternal?: boolean;
      internalLink?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      href?: string;
      target?: boolean;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  } | {
    url?: string;
    _type: "youtube";
    _key: string;
  } | {
    _key: string;
  } & Code>;
  links?: Array<{
    _key: string;
  } & Link>;
};

export type Timeline2 = {
  _type: "timeline-2";
  padding?: SectionPadding;
  colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
  tagLine?: string;
  title?: string;
  description?: string;
  headerLinks?: Array<{
    _key: string;
  } & Link>;
  phases?: Array<{
    phaseNumber?: string;
    title?: string;
    subtitle?: string;
    description?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    links?: Array<{
      _key: string;
    } & Link>;
    _type: "phase";
    _key: string;
  }>;
};

export type Timelines1 = {
  _type: "timelines-1";
  title?: string;
  tagLine?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      isExternal?: boolean;
      internalLink?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      href?: string;
      target?: boolean;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  } | {
    url?: string;
    _type: "youtube";
    _key: string;
  } | {
    _key: string;
  } & Code>;
};

export type TimelineRow = {
  _type: "timeline-row";
  padding?: SectionPadding;
  colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
  timelines?: Array<{
    _key: string;
  } & Timelines1>;
};

export type CarouselGalleryItem = {
  _type: "carousel-gallery-item";
  title?: string;
  summary?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  link?: Link;
};

export type CarouselGallery = {
  _type: "carousel-gallery";
  padding?: SectionPadding;
  colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
  heading?: string;
  demoUrl?: string;
  demoText?: string;
  items?: Array<{
    _key: string;
  } & CarouselGalleryItem>;
};

export type Carousel2 = {
  _type: "carousel-2";
  padding?: SectionPadding;
  colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
  testimonial?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "testimonial";
  }>;
};

export type Carousel1 = {
  _type: "carousel-1";
  padding?: SectionPadding;
  colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
  size?: "one" | "two" | "three";
  indicators?: "none" | "dots" | "count";
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
};

export type GridRow = {
  _type: "grid-row";
  padding?: SectionPadding;
  colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
  gridColumns?: "grid-cols-2" | "grid-cols-3" | "grid-cols-4";
  columns?: Array<{
    _key: string;
  } & GridCard | {
    _key: string;
  } & GridPost | {
    _key: string;
  } & PricingCard>;
};

export type GridPost = {
  _type: "grid-post";
  post?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "post";
  };
};

export type PricingCard = {
  _type: "pricing-card";
  title?: string;
  tagLine?: string;
  price?: {
    value?: number;
    period?: string;
  };
  list?: Array<string>;
  excerpt?: string;
  link?: Link;
};

export type GridCard = {
  _type: "grid-card";
  title?: string;
  excerpt?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  link?: Link;
};

export type SplitInfo = {
  _type: "split-info";
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  title?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      isExternal?: boolean;
      internalLink?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      href?: string;
      target?: boolean;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  } | {
    url?: string;
    _type: "youtube";
    _key: string;
  } | {
    _key: string;
  } & Code>;
  tags?: Array<string>;
};

export type SplitInfoList = {
  _type: "split-info-list";
  list?: Array<{
    _key: string;
  } & SplitInfo>;
};

export type SplitImage = {
  _type: "split-image";
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type SplitCard = {
  _type: "split-card";
  tagLine?: string;
  title?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      isExternal?: boolean;
      internalLink?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      href?: string;
      target?: boolean;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  } | {
    url?: string;
    _type: "youtube";
    _key: string;
  } | {
    _key: string;
  } & Code>;
};

export type SplitCardsList = {
  _type: "split-cards-list";
  list?: Array<{
    _key: string;
  } & SplitCard>;
};

export type SplitContent = {
  _type: "split-content";
  sticky?: boolean;
  padding?: SectionPadding;
  colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
  tagLine?: string;
  title?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      isExternal?: boolean;
      internalLink?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      href?: string;
      target?: boolean;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  } | {
    url?: string;
    _type: "youtube";
    _key: string;
  } | {
    _key: string;
  } & Code>;
  link?: Link;
};

export type SplitRow = {
  _type: "split-row";
  padding?: SectionPadding;
  colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
  noGap?: boolean;
  splitColumns?: Array<{
    _key: string;
  } & SplitContent | {
    _key: string;
  } & SplitCardsList | {
    _key: string;
  } & SplitImage | {
    _key: string;
  } & SplitInfoList>;
};

export type SectionHeader = {
  _type: "section-header";
  padding?: SectionPadding;
  colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
  sectionWidth?: "default" | "narrow";
  stackAlign?: "left" | "center";
  tagLine?: string;
  title?: string;
  description?: string;
};

export type Hero3 = {
  _type: "hero-3";
  backgroundImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  title?: string;
  description?: string;
  links?: Array<{
    _key: string;
  } & Link>;
};

export type Hero2 = {
  _type: "hero-2";
  tagLine?: string;
  title?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      isExternal?: boolean;
      internalLink?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      href?: string;
      target?: boolean;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  } | {
    url?: string;
    _type: "youtube";
    _key: string;
  } | {
    _key: string;
  } & Code>;
  links?: Array<{
    _key: string;
  } & Link>;
};

export type Hero1 = {
  _type: "hero-1";
  tagLine?: string;
  title?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      isExternal?: boolean;
      internalLink?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      href?: string;
      target?: boolean;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  } | {
    url?: string;
    _type: "youtube";
    _key: string;
  } | {
    _key: string;
  } & Code>;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  links?: Array<{
    _key: string;
  } & Link>;
};

export type SocialLink = {
  _type: "social-link";
  platform?: "github" | "x" | "linkedin" | "facebook" | "instagram" | "youtube" | "tiktok" | "discord" | "twitch" | "dribbble" | "behance" | "medium" | "devto" | "stackoverflow";
  url?: string;
};

export type SectionPadding = {
  _type: "section-padding";
  top?: boolean;
  bottom?: boolean;
};

export type ButtonVariant = "default" | "destructive" | "outline" | "secondary" | "ghost" | "link";

export type ColorVariant = "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";

export type Link = {
  _type: "link";
  isExternal?: boolean;
  internalLink?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "post";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "project";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "projects-page";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  title?: string;
  href?: string;
  target?: boolean;
  buttonVariant?: ButtonVariant;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    isExternal?: boolean;
    internalLink?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "page";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "post";
    };
    href?: string;
    target?: boolean;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "image";
  _key: string;
} | {
  url?: string;
  _type: "youtube";
  _key: string;
} | {
  _key: string;
} & Code>;

export type Settings = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  logo?: {
    dark?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    light?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    width?: number;
    height?: number;
  };
  siteName?: string;
  projectsPerPage?: number;
  postsPerPage?: number;
  menuPosition?: "left" | "center" | "right";
  headerButtons?: Array<{
    isExternal?: boolean;
    internalLink?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "page";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "post";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "project";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "projects-page";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "blog-page";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "category";
    };
    title?: string;
    href?: string;
    target?: boolean;
    buttonVariant?: ButtonVariant;
    _key: string;
  }>;
  footerLinks?: Array<{
    _key: string;
  } & Link>;
  socialLinks?: Array<{
    _key: string;
  } & SocialLink>;
  copyright?: BlockContent;
};

export type Navigation = {
  _id: string;
  _type: "navigation";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  links?: Array<{
    isExternal?: boolean;
    internalLink?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "page";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "post";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "project";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "projects-page";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "blog-page";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "category";
    };
    title?: string;
    href?: string;
    target?: boolean;
    buttonVariant?: ButtonVariant;
    _key: string;
  }>;
};

export type Testimonial = {
  _id: string;
  _type: "testimonial";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  title?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  body?: BlockContent;
  rating?: number;
  orderRank?: string;
};

export type Faq = {
  _id: string;
  _type: "faq";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  body?: BlockContent;
  orderRank?: string;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  meta_title?: string;
  meta_description?: string;
  noindex?: boolean;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  orderRank?: string;
};

export type BlogPage = {
  _id: string;
  _type: "blog-page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  subtitle?: string;
  heroImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  meta_title?: string;
  meta_description?: string;
  noindex?: boolean;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type ProjectsPage = {
  _id: string;
  _type: "projects-page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  subtitle?: string;
  heroImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  meta_title?: string;
  meta_description?: string;
  noindex?: boolean;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Project = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  excerpt?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  blocks?: Array<{
    _key: string;
  } & Hero1 | {
    _key: string;
  } & Hero3 | {
    _key: string;
  } & SectionHeader | {
    _key: string;
  } & SplitRow | {
    _key: string;
  } & GridRow | {
    _key: string;
  } & CarouselGallery | {
    _key: string;
  } & TimelineRow | {
    _key: string;
  } & GalleryLightbox>;
  meta_title?: string;
  meta_description?: string;
  noindex?: boolean;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  blocks?: Array<{
    _key: string;
  } & Hero1 | {
    _key: string;
  } & Hero2 | {
    _key: string;
  } & Hero3 | {
    _key: string;
  } & SectionHeader | {
    _key: string;
  } & ContentBlock | {
    _key: string;
  } & SplitRow | {
    _key: string;
  } & GridRow | {
    _key: string;
  } & Carousel1 | {
    _key: string;
  } & Carousel2 | {
    _key: string;
  } & CarouselGallery | {
    _key: string;
  } & TimelineRow | {
    _key: string;
  } & Timeline2 | {
    _key: string;
  } & Cta1 | {
    _key: string;
  } & LogoCloud1 | {
    _key: string;
  } & Faqs | {
    _key: string;
  } & FormNewsletter | {
    _key: string;
  } & AllPosts | {
    _key: string;
  } & FeaturedProjects | {
    _key: string;
  } & GalleryLightbox | {
    _key: string;
  } & FeaturesCards | {
    _key: string;
  } & Team1>;
  meta_title?: string;
  meta_description?: string;
  noindex?: boolean;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  orderRank?: string;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  excerpt?: string;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  body?: BlockContent;
  meta_title?: string;
  meta_description?: string;
  noindex?: boolean;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  orderRank?: string;
};

export type LucideIcon = string;

export type MediaTag = {
  _id: string;
  _type: "media.tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Slug;
};

export type Code = {
  _type: "code";
  language?: string;
  filename?: string;
  code?: string;
  highlightedLines?: Array<number>;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = ContentBlock | Team1 | FeaturesCard | FeaturesCards | GalleryLightbox | FeaturedProjects | AllPosts | FormNewsletter | Faqs | LogoCloud1 | Cta1 | Timeline2 | Timelines1 | TimelineRow | CarouselGalleryItem | CarouselGallery | Carousel2 | Carousel1 | GridRow | GridPost | PricingCard | GridCard | SplitInfo | SplitInfoList | SplitImage | SplitCard | SplitCardsList | SplitContent | SplitRow | SectionHeader | Hero3 | Hero2 | Hero1 | SocialLink | SectionPadding | ButtonVariant | ColorVariant | Link | BlockContent | Settings | Navigation | Testimonial | Faq | Category | BlogPage | ProjectsPage | Project | Page | Post | Author | LucideIcon | MediaTag | Code | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./app/sitemap.ts
// Variable: pagesQuery
// Query: *[_type == 'page'] | order(slug.current) {      'url': $baseUrl + select(slug.current == 'index' => '', '/' + slug.current),      'lastModified': _updatedAt,      'changeFrequency': 'daily',      'priority': select(        slug.current == 'index' => 1,        0.5      )    }
export type PagesQueryResult = Array<{
  url: unknown;
  lastModified: string;
  changeFrequency: "daily";
  priority: 0.5 | 1;
}>;
// Variable: postsQuery
// Query: *[_type == 'post'] | order(_updatedAt desc) {      'url': $baseUrl + '/blog/' + slug.current,      'lastModified': _updatedAt,      'changeFrequency': 'weekly',      'priority': 0.7    }
export type PostsQueryResult = Array<{
  url: unknown;
  lastModified: string;
  changeFrequency: "weekly";
  priority: 0.7;
}>;

// Source: ./sanity/queries/blog-page.ts
// Variable: BLOG_PAGE_QUERY
// Query: *[_type == "blog-page"][0]{  title,  subtitle,  heroImage{      ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }  },  meta_title,  meta_description,  noindex,  ogImage {    asset->{      _id,      url,      metadata {        dimensions {          width,          height        }      }    },  }}
export type BLOG_PAGE_QUERYResult = {
  title: string | null;
  subtitle: string | null;
  heroImage: {
    asset: {
      _id: string;
      url: string | null;
      mimeType: string | null;
      metadata: {
        lqip: string | null;
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  meta_title: string | null;
  meta_description: string | null;
  noindex: boolean | null;
  ogImage: {
    asset: {
      _id: string;
      url: string | null;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
  } | null;
} | null;

// Source: ./sanity/queries/category.ts
// Variable: CATEGORY_QUERY
// Query: *[_type == "category" && slug.current == $slug][0]{  title,  slug,  description,  image{      ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }  },  meta_title,  meta_description,  noindex,  ogImage {    asset->{      _id,      url,      metadata {        dimensions {          width,          height        }      }    },  }}
export type CATEGORY_QUERYResult = {
  title: string | null;
  slug: Slug | null;
  description: string | null;
  image: {
    asset: {
      _id: string;
      url: string | null;
      mimeType: string | null;
      metadata: {
        lqip: string | null;
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  meta_title: string | null;
  meta_description: string | null;
  noindex: boolean | null;
  ogImage: {
    asset: {
      _id: string;
      url: string | null;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
  } | null;
} | null;
// Variable: CATEGORY_PROJECTS_PAGINATED_QUERY
// Query: {  "category": *[_type == "category" && slug.current == $slug][0]{    title,    slug,    description,    image{        ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }    },    meta_title,    meta_description,    noindex,    ogImage {      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      },    }  },  "projects": *[_type == "project" && defined(slug) && references(*[_type == "category" && slug.current == $slug][0]._id)] | order(_createdAt desc) [$start...$end]{    title,    slug,    excerpt,    image{        ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }    },    categories[]->{      title,      slug    },  },  "total": count(*[_type == "project" && defined(slug) && references(*[_type == "category" && slug.current == $slug][0]._id)]),  "firstProjectImage": *[_type == "project" && defined(slug) && references(*[_type == "category" && slug.current == $slug][0]._id)] | order(_createdAt desc) [0].image{      ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }  }}
export type CATEGORY_PROJECTS_PAGINATED_QUERYResult = {
  category: {
    title: string | null;
    slug: Slug | null;
    description: string | null;
    image: {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
    meta_title: string | null;
    meta_description: string | null;
    noindex: boolean | null;
    ogImage: {
      asset: {
        _id: string;
        url: string | null;
        metadata: {
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
    } | null;
  } | null;
  projects: Array<{
    title: string | null;
    slug: Slug | null;
    excerpt: string | null;
    image: {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
    categories: Array<{
      title: string | null;
      slug: Slug | null;
    }> | null;
  }>;
  total: number;
  firstProjectImage: {
    asset: {
      _id: string;
      url: string | null;
      mimeType: string | null;
      metadata: {
        lqip: string | null;
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
};
// Variable: CATEGORIES_SLUGS_QUERY
// Query: *[_type == "category" && defined(slug)]{slug}
export type CATEGORIES_SLUGS_QUERYResult = Array<{
  slug: Slug | null;
}>;

// Source: ./sanity/queries/navigation.ts
// Variable: NAVIGATION_QUERY
// Query: *[_type == "navigation"]{    _type,    _key,    links[]{      _key,      _type,      title,      buttonVariant,      target,          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    }  }
export type NAVIGATION_QUERYResult = Array<{
  _type: "navigation";
  _key: null;
  links: Array<{
    _key: string;
    _type: null;
    title?: string;
    buttonVariant?: ButtonVariant;
    target?: boolean;
    isExternal?: boolean;
    internalLink?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "blog-page";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "category";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "page";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "post";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "project";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "projects-page";
    };
    href: string | "/" | "/projects" | null;
  }> | null;
}>;

// Source: ./sanity/queries/page.ts
// Variable: PAGE_QUERY
// Query: *[_type == "page" && slug.current == $slug][0]{    blocks[]{        _type == "hero-1" => {    _type,    _key,    tagLine,    title,    body[]{        ...,  markDefs[]{    ...,    _type == "link" => {          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    }  },  _type == "image" => {      ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }  },  _type == "youtube" => {    _type,    url  }    },    image{        ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }    },    links[]{          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    },  },        _type == "hero-2" => {    _type,    _key,    tagLine,    title,    body[]{        ...,  markDefs[]{    ...,    _type == "link" => {          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    }  },  _type == "image" => {      ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }  },  _type == "youtube" => {    _type,    url  }    },    links[]{          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    },  },        _type == "hero-3" => {    _type,    _key,    backgroundImage{        ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }    },    title,    description,    links[]{          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    },  },        _type == "section-header" => {    _type,    _key,    padding,    colorVariant,    sectionWidth,    stackAlign,    tagLine,    title,    description,    link{          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    },  },        _type == "split-row" => {    _type,    _key,    padding,    colorVariant,    noGap,    splitColumns[]{        _type == "split-content" => {    _type,    _key,    sticky,    padding,    colorVariant,    tagLine,    title,    body[]{        ...,  markDefs[]{    ...,    _type == "link" => {          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    }  },  _type == "image" => {      ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }  },  _type == "youtube" => {    _type,    url  }    },    link{          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    },  },        _type == "split-cards-list" => {    _type,    _key,    list[]{      tagLine,      title,      body[]{          ...,  markDefs[]{    ...,    _type == "link" => {          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    }  },  _type == "image" => {      ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }  },  _type == "youtube" => {    _type,    url  }      },    },  },        _type == "split-image" => {    _type,    _key,    image{        ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }    },  },        _type == "split-info-list" => {    _type,    _key,    list[]{      image{          ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }      },      title,      body[]{          ...,  markDefs[]{    ...,    _type == "link" => {          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    }  },  _type == "image" => {      ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }  },  _type == "youtube" => {    _type,    url  }      },      tags[],    },  },    },  },        _type == "grid-row" => {    _type,    _key,    padding,    colorVariant,    gridColumns,    columns[]{        _type == "grid-card" => {    _type,    _key,    title,    excerpt,    image{        ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }    },    link{          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    },  },        _type == "pricing-card" => {    _type,    _key,    title,    tagLine,    price,    list[],    excerpt,    link{          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    },  },        _type == "grid-post" => {    _type,    _key,    post->{      title,      slug,      excerpt,      image{          ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }      },      categories[]->{        _id,        title,      },    },  },    },  },        _type == "carousel-1" => {    _type,    _key,    padding,    colorVariant,    size,    orientation,    indicators,    images[]{        ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }    },  },        _type == "carousel-2" => {    _type,    _key,    padding,    colorVariant,    testimonial[]->{      _id,      name,      title,      image{          ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }      },      body[]{          ...,  markDefs[]{    ...,    _type == "link" => {          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    }  },  _type == "image" => {      ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }  },  _type == "youtube" => {    _type,    url  }      },      rating,    },  },        _type == "carousel-gallery" => {    _type,    _key,    padding,    colorVariant,    heading,    demoUrl,    demoText,    items[]{        _type == "carousel-gallery-item" => {    _type,    _key,    title,    summary,    image{        ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }    },    link{          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    },  },    },  },        _type == "timeline-row" => {    _type,    _key,    padding,    colorVariant,    timelines[]{      title,      tagLine,      body[]{          ...,  markDefs[]{    ...,    _type == "link" => {          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    }  },  _type == "image" => {      ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }  },  _type == "youtube" => {    _type,    url  }      },    },  },        _type == "timeline-2" => {    _type,    _key,    padding,    colorVariant,    tagLine,    title,    description,    headerLinks[]{          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    },    phases[]{      _key,      phaseNumber,      title,      subtitle,      description,      image{          ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }      },      links[]{            _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )      },    },  },        _type == "cta-1" => {    _type,    _key,    padding,    colorVariant,    sectionWidth,    stackAlign,    tagLine,    title,    body[]{        ...,  markDefs[]{    ...,    _type == "link" => {          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    }  },  _type == "image" => {      ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }  },  _type == "youtube" => {    _type,    url  }    },    links[]{          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    },  },        _type == "logo-cloud-1" => {    _type,    _key,    padding,    colorVariant,    title,    images[]{        ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }    },  },        _type == "faqs" => {    _type,    _key,    padding,    colorVariant,    faqs[]->{      _id,      title,      body[]{          ...,  markDefs[]{    ...,    _type == "link" => {          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    }  },  _type == "image" => {      ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }  },  _type == "youtube" => {    _type,    url  }      },    },  },        _type == "form-newsletter" => {    _type,    _key,    padding,    colorVariant,    stackAlign,    consentText,    buttonText,    successMessage,  },        _type == "all-posts" => {    _type,    _key,    padding,    colorVariant,  },        _type == "featured-projects" => {    _type,    _key,    padding,    colorVariant,    title,    showViewAllButton,    viewAllButtonText,    viewAllButtonVariant,    projects[]->{      title,      slug,      excerpt,      image{          ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }      },      categories[]->{        title,        slug      },    },  },        _type == "gallery-lightbox" => {    _type,    _key,    padding,    colorVariant,    tagLine,    title,    description,    columns,    spacing,    images[]{        ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  },      caption,    },  },        _type == "features-cards" => {    _type,    _key,    padding,    colorVariant,    tagLine,    title,    description,    layout,    cards[]{        _type == "features-card" => {    _type,    _key,    mediaType,    image{        ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }    },    icon,    tagLine,    title,    description,    links[]{          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    },  }    },  },        _type == "team-1" => {    _type,    _key,    padding,    colorVariant,    heading,    description,    members[]{      _key,      name,      role,      avatar{          ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }      },      socialLinks[]{          _key,  platform,  url      },    },  },        _type == "content-block" => {    _type,    _key,    padding,    colorVariant,    sectionWidth,    stackAlign,    tagLine,    title,    content[]{        ...,  markDefs[]{    ...,    _type == "link" => {          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    }  },  _type == "image" => {      ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }  },  _type == "youtube" => {    _type,    url  }    },  },    },    meta_title,    meta_description,    noindex,    ogImage {      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      },    }  }
export type PAGE_QUERYResult = {
  blocks: Array<{
    _type: "all-posts";
    _key: string;
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
  } | {
    _type: "carousel-1";
    _key: string;
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    size: "one" | "three" | "two" | null;
    orientation: null;
    indicators: "count" | "dots" | "none" | null;
    images: Array<{
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    }> | null;
  } | {
    _type: "carousel-2";
    _key: string;
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    testimonial: Array<{
      _id: string;
      name: string | null;
      title: string | null;
      image: {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      } | null;
      body: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs: Array<{
          isExternal?: boolean;
          internalLink?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "page";
          } | {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "post";
          };
          href: string | "/" | null;
          target?: boolean;
          _type: "link";
          _key: string;
        }> | null;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        _key: string;
        _type: "code";
        language?: string;
        filename?: string;
        code?: string;
        highlightedLines?: Array<number>;
        markDefs: null;
      } | {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
        markDefs: null;
      } | {
        url: string | null;
        _type: "youtube";
        _key: string;
        markDefs: null;
      }> | null;
      rating: number | null;
    }> | null;
  } | {
    _type: "carousel-gallery";
    _key: string;
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    heading: string | null;
    demoUrl: string | null;
    demoText: string | null;
    items: Array<{
      _type: "carousel-gallery-item";
      _key: string;
      title: string | null;
      summary: string | null;
      image: {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      } | null;
      link: {
        _key: null;
        _type: "link";
        isExternal?: boolean;
        internalLink?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "category";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "project";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "projects-page";
        };
        title?: string;
        href: string | "/" | "/projects" | null;
        target?: boolean;
        buttonVariant?: ButtonVariant;
      } | null;
    }> | null;
  } | {
    _type: "content-block";
    _key: string;
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    sectionWidth: "default" | "narrow" | null;
    stackAlign: "center" | "left" | null;
    tagLine: string | null;
    title: string | null;
    content: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
      listItem?: "bullet" | "number";
      markDefs: Array<{
        isExternal?: boolean;
        internalLink?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        href: string | "/" | null;
        target?: boolean;
        _type: "link";
        _key: string;
      }> | null;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      _key: string;
      _type: "code";
      language?: string;
      filename?: string;
      code?: string;
      highlightedLines?: Array<number>;
      markDefs: null;
    } | {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
      markDefs: null;
    } | {
      url: string | null;
      _type: "youtube";
      _key: string;
      markDefs: null;
    }> | null;
  } | {
    _type: "cta-1";
    _key: string;
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    sectionWidth: "default" | "narrow" | null;
    stackAlign: "center" | "left" | null;
    tagLine: string | null;
    title: string | null;
    body: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
      listItem?: "bullet" | "number";
      markDefs: Array<{
        isExternal?: boolean;
        internalLink?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        href: string | "/" | null;
        target?: boolean;
        _type: "link";
        _key: string;
      }> | null;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      _key: string;
      _type: "code";
      language?: string;
      filename?: string;
      code?: string;
      highlightedLines?: Array<number>;
      markDefs: null;
    } | {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
      markDefs: null;
    } | {
      url: string | null;
      _type: "youtube";
      _key: string;
      markDefs: null;
    }> | null;
    links: Array<{
      _key: string;
      _type: "link";
      isExternal?: boolean;
      internalLink?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "category";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "project";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "projects-page";
      };
      title?: string;
      href: string | "/" | "/projects" | null;
      target?: boolean;
      buttonVariant?: ButtonVariant;
    }> | null;
  } | {
    _type: "faqs";
    _key: string;
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    faqs: Array<{
      _id: string;
      title: string | null;
      body: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs: Array<{
          isExternal?: boolean;
          internalLink?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "page";
          } | {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "post";
          };
          href: string | "/" | null;
          target?: boolean;
          _type: "link";
          _key: string;
        }> | null;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        _key: string;
        _type: "code";
        language?: string;
        filename?: string;
        code?: string;
        highlightedLines?: Array<number>;
        markDefs: null;
      } | {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
        markDefs: null;
      } | {
        url: string | null;
        _type: "youtube";
        _key: string;
        markDefs: null;
      }> | null;
    }> | null;
  } | {
    _type: "featured-projects";
    _key: string;
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    title: string | null;
    showViewAllButton: boolean | null;
    viewAllButtonText: string | null;
    viewAllButtonVariant: "default" | "destructive" | "ghost" | "link" | "outline" | "secondary" | null;
    projects: Array<{
      title: string | null;
      slug: Slug | null;
      excerpt: string | null;
      image: {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      } | null;
      categories: Array<{
        title: string | null;
        slug: Slug | null;
      }> | null;
    }> | null;
  } | {
    _type: "features-cards";
    _key: string;
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    tagLine: string | null;
    title: string | null;
    description: string | null;
    layout: "grid" | "masonry" | null;
    cards: Array<{
      _type: "features-card";
      _key: string;
      mediaType: "icon" | "image" | null;
      image: {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      } | null;
      icon: string | null;
      tagLine: string | null;
      title: string | null;
      description: string | null;
      links: Array<{
        _key: string;
        _type: "link";
        isExternal?: boolean;
        internalLink?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "category";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "project";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "projects-page";
        };
        title?: string;
        href: string | "/" | "/projects" | null;
        target?: boolean;
        buttonVariant?: ButtonVariant;
      }> | null;
    }> | null;
  } | {
    _type: "form-newsletter";
    _key: string;
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    stackAlign: "center" | "left" | null;
    consentText: string | null;
    buttonText: string | null;
    successMessage: string | null;
  } | {
    _type: "gallery-lightbox";
    _key: string;
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    tagLine: string | null;
    title: string | null;
    description: string | null;
    columns: "grid-cols-2" | "grid-cols-3" | "grid-cols-4" | null;
    spacing: "gap-2" | "gap-4" | "gap-6" | "gap-8" | null;
    images: Array<{
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      caption: string | null;
      _type: "image";
      _key: string;
    }> | null;
  } | {
    _type: "grid-row";
    _key: string;
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    gridColumns: "grid-cols-2" | "grid-cols-3" | "grid-cols-4" | null;
    columns: Array<{
      _type: "grid-card";
      _key: string;
      title: string | null;
      excerpt: string | null;
      image: {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      } | null;
      link: {
        _key: null;
        _type: "link";
        isExternal?: boolean;
        internalLink?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "category";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "project";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "projects-page";
        };
        title?: string;
        href: string | "/" | "/projects" | null;
        target?: boolean;
        buttonVariant?: ButtonVariant;
      } | null;
    } | {
      _type: "grid-post";
      _key: string;
      post: {
        title: string | null;
        slug: Slug | null;
        excerpt: string | null;
        image: {
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
        } | null;
        categories: Array<{
          _id: string;
          title: string | null;
        }> | null;
      } | null;
    } | {
      _type: "pricing-card";
      _key: string;
      title: string | null;
      tagLine: string | null;
      price: {
        value?: number;
        period?: string;
      } | null;
      list: Array<string> | null;
      excerpt: string | null;
      link: {
        _key: null;
        _type: "link";
        isExternal?: boolean;
        internalLink?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "category";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "project";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "projects-page";
        };
        title?: string;
        href: string | "/" | "/projects" | null;
        target?: boolean;
        buttonVariant?: ButtonVariant;
      } | null;
    }> | null;
  } | {
    _type: "hero-1";
    _key: string;
    tagLine: string | null;
    title: string | null;
    body: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
      listItem?: "bullet" | "number";
      markDefs: Array<{
        isExternal?: boolean;
        internalLink?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        href: string | "/" | null;
        target?: boolean;
        _type: "link";
        _key: string;
      }> | null;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      _key: string;
      _type: "code";
      language?: string;
      filename?: string;
      code?: string;
      highlightedLines?: Array<number>;
      markDefs: null;
    } | {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
      markDefs: null;
    } | {
      url: string | null;
      _type: "youtube";
      _key: string;
      markDefs: null;
    }> | null;
    image: {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
    links: Array<{
      _key: string;
      _type: "link";
      isExternal?: boolean;
      internalLink?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "category";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "project";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "projects-page";
      };
      title?: string;
      href: string | "/" | "/projects" | null;
      target?: boolean;
      buttonVariant?: ButtonVariant;
    }> | null;
  } | {
    _type: "hero-2";
    _key: string;
    tagLine: string | null;
    title: string | null;
    body: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
      listItem?: "bullet" | "number";
      markDefs: Array<{
        isExternal?: boolean;
        internalLink?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        href: string | "/" | null;
        target?: boolean;
        _type: "link";
        _key: string;
      }> | null;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      _key: string;
      _type: "code";
      language?: string;
      filename?: string;
      code?: string;
      highlightedLines?: Array<number>;
      markDefs: null;
    } | {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
      markDefs: null;
    } | {
      url: string | null;
      _type: "youtube";
      _key: string;
      markDefs: null;
    }> | null;
    links: Array<{
      _key: string;
      _type: "link";
      isExternal?: boolean;
      internalLink?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "category";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "project";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "projects-page";
      };
      title?: string;
      href: string | "/" | "/projects" | null;
      target?: boolean;
      buttonVariant?: ButtonVariant;
    }> | null;
  } | {
    _type: "hero-3";
    _key: string;
    backgroundImage: {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
    title: string | null;
    description: string | null;
    links: Array<{
      _key: string;
      _type: "link";
      isExternal?: boolean;
      internalLink?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "category";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "project";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "projects-page";
      };
      title?: string;
      href: string | "/" | "/projects" | null;
      target?: boolean;
      buttonVariant?: ButtonVariant;
    }> | null;
  } | {
    _type: "logo-cloud-1";
    _key: string;
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    title: string | null;
    images: Array<{
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    }> | null;
  } | {
    _type: "section-header";
    _key: string;
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    sectionWidth: "default" | "narrow" | null;
    stackAlign: "center" | "left" | null;
    tagLine: string | null;
    title: string | null;
    description: string | null;
    link: null;
  } | {
    _type: "split-row";
    _key: string;
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    noGap: boolean | null;
    splitColumns: Array<{
      _type: "split-cards-list";
      _key: string;
      list: Array<{
        tagLine: string | null;
        title: string | null;
        body: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
          listItem?: "bullet" | "number";
          markDefs: Array<{
            isExternal?: boolean;
            internalLink?: {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "page";
            } | {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "post";
            };
            href: string | "/" | null;
            target?: boolean;
            _type: "link";
            _key: string;
          }> | null;
          level?: number;
          _type: "block";
          _key: string;
        } | {
          _key: string;
          _type: "code";
          language?: string;
          filename?: string;
          code?: string;
          highlightedLines?: Array<number>;
          markDefs: null;
        } | {
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
          _key: string;
          markDefs: null;
        } | {
          url: string | null;
          _type: "youtube";
          _key: string;
          markDefs: null;
        }> | null;
      }> | null;
    } | {
      _type: "split-content";
      _key: string;
      sticky: boolean | null;
      padding: SectionPadding | null;
      colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
      tagLine: string | null;
      title: string | null;
      body: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs: Array<{
          isExternal?: boolean;
          internalLink?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "page";
          } | {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "post";
          };
          href: string | "/" | null;
          target?: boolean;
          _type: "link";
          _key: string;
        }> | null;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        _key: string;
        _type: "code";
        language?: string;
        filename?: string;
        code?: string;
        highlightedLines?: Array<number>;
        markDefs: null;
      } | {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
        markDefs: null;
      } | {
        url: string | null;
        _type: "youtube";
        _key: string;
        markDefs: null;
      }> | null;
      link: {
        _key: null;
        _type: "link";
        isExternal?: boolean;
        internalLink?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "category";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "project";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "projects-page";
        };
        title?: string;
        href: string | "/" | "/projects" | null;
        target?: boolean;
        buttonVariant?: ButtonVariant;
      } | null;
    } | {
      _type: "split-image";
      _key: string;
      image: {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      } | null;
    } | {
      _type: "split-info-list";
      _key: string;
      list: Array<{
        image: {
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
        } | null;
        title: string | null;
        body: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
          listItem?: "bullet" | "number";
          markDefs: Array<{
            isExternal?: boolean;
            internalLink?: {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "page";
            } | {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "post";
            };
            href: string | "/" | null;
            target?: boolean;
            _type: "link";
            _key: string;
          }> | null;
          level?: number;
          _type: "block";
          _key: string;
        } | {
          _key: string;
          _type: "code";
          language?: string;
          filename?: string;
          code?: string;
          highlightedLines?: Array<number>;
          markDefs: null;
        } | {
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
          _key: string;
          markDefs: null;
        } | {
          url: string | null;
          _type: "youtube";
          _key: string;
          markDefs: null;
        }> | null;
        tags: Array<string> | null;
      }> | null;
    }> | null;
  } | {
    _type: "team-1";
    _key: string;
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    heading: string | null;
    description: string | null;
    members: Array<{
      _key: string;
      name: string | null;
      role: string | null;
      avatar: {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      } | null;
      socialLinks: Array<{
        _key: string;
        platform: "behance" | "devto" | "discord" | "dribbble" | "facebook" | "github" | "instagram" | "linkedin" | "medium" | "stackoverflow" | "tiktok" | "twitch" | "x" | "youtube" | null;
        url: string | null;
      }> | null;
    }> | null;
  } | {
    _type: "timeline-2";
    _key: string;
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    tagLine: string | null;
    title: string | null;
    description: string | null;
    headerLinks: Array<{
      _key: string;
      _type: "link";
      isExternal?: boolean;
      internalLink?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "category";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "project";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "projects-page";
      };
      title?: string;
      href: string | "/" | "/projects" | null;
      target?: boolean;
      buttonVariant?: ButtonVariant;
    }> | null;
    phases: Array<{
      _key: string;
      phaseNumber: string | null;
      title: string | null;
      subtitle: string | null;
      description: string | null;
      image: {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      } | null;
      links: Array<{
        _key: string;
        _type: "link";
        isExternal?: boolean;
        internalLink?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "category";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "project";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "projects-page";
        };
        title?: string;
        href: string | "/" | "/projects" | null;
        target?: boolean;
        buttonVariant?: ButtonVariant;
      }> | null;
    }> | null;
  } | {
    _type: "timeline-row";
    _key: string;
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    timelines: Array<{
      title: string | null;
      tagLine: string | null;
      body: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs: Array<{
          isExternal?: boolean;
          internalLink?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "page";
          } | {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "post";
          };
          href: string | "/" | null;
          target?: boolean;
          _type: "link";
          _key: string;
        }> | null;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        _key: string;
        _type: "code";
        language?: string;
        filename?: string;
        code?: string;
        highlightedLines?: Array<number>;
        markDefs: null;
      } | {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
        markDefs: null;
      } | {
        url: string | null;
        _type: "youtube";
        _key: string;
        markDefs: null;
      }> | null;
    }> | null;
  }> | null;
  meta_title: string | null;
  meta_description: string | null;
  noindex: boolean | null;
  ogImage: {
    asset: {
      _id: string;
      url: string | null;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
  } | null;
} | null;
// Variable: PAGES_SLUGS_QUERY
// Query: *[_type == "page" && defined(slug)]{slug}
export type PAGES_SLUGS_QUERYResult = Array<{
  slug: Slug | null;
}>;

// Source: ./sanity/queries/post.ts
// Variable: POST_QUERY
// Query: *[_type == "post" && slug.current == $slug][0]{    title,    slug,    image{        ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }    },    body[]{        ...,  markDefs[]{    ...,    _type == "link" => {          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    }  },  _type == "image" => {      ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }  },  _type == "youtube" => {    _type,    url  }    },    author->{      name,      image {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        },        alt      }    },    _createdAt,    _updatedAt,    meta_title,    meta_description,    noindex,    ogImage {      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      },    }}
export type POST_QUERYResult = {
  title: string | null;
  slug: Slug | null;
  image: {
    asset: {
      _id: string;
      url: string | null;
      mimeType: string | null;
      metadata: {
        lqip: string | null;
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet" | "number";
    markDefs: Array<{
      isExternal?: boolean;
      internalLink?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      href: string | "/" | null;
      target?: boolean;
      _type: "link";
      _key: string;
    }> | null;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    _key: string;
    _type: "code";
    language?: string;
    filename?: string;
    code?: string;
    highlightedLines?: Array<number>;
    markDefs: null;
  } | {
    asset: {
      _id: string;
      url: string | null;
      mimeType: string | null;
      metadata: {
        lqip: string | null;
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
    markDefs: null;
  } | {
    url: string | null;
    _type: "youtube";
    _key: string;
    markDefs: null;
  }> | null;
  author: {
    name: string | null;
    image: {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt: string | null;
      _type: "image";
    } | null;
  } | null;
  _createdAt: string;
  _updatedAt: string;
  meta_title: string | null;
  meta_description: string | null;
  noindex: boolean | null;
  ogImage: {
    asset: {
      _id: string;
      url: string | null;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
  } | null;
} | null;
// Variable: POSTS_QUERY
// Query: *[_type == "post" && defined(slug)] | order(_createdAt desc){    title,    slug,    excerpt,    image{        ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }    },}
export type POSTS_QUERYResult = Array<{
  title: string | null;
  slug: Slug | null;
  excerpt: string | null;
  image: {
    asset: {
      _id: string;
      url: string | null;
      mimeType: string | null;
      metadata: {
        lqip: string | null;
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
}>;
// Variable: POSTS_PAGINATED_QUERY
// Query: {  "posts": *[_type == "post" && defined(slug)] | order(_createdAt desc) [$start...$end]{    title,    slug,    excerpt,    image{        ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }    },  },  "total": count(*[_type == "post" && defined(slug)])}
export type POSTS_PAGINATED_QUERYResult = {
  posts: Array<{
    title: string | null;
    slug: Slug | null;
    excerpt: string | null;
    image: {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  }>;
  total: number;
};
// Variable: POSTS_SLUGS_QUERY
// Query: *[_type == "post" && defined(slug)]{slug}
export type POSTS_SLUGS_QUERYResult = Array<{
  slug: Slug | null;
}>;

// Source: ./sanity/queries/project.ts
// Variable: PROJECT_QUERY
// Query: *[_type == "project" && slug.current == $slug][0]{    title,    slug,    excerpt,    image{        ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }    },    blocks[]{        _type == "hero-1" => {    _type,    _key,    tagLine,    title,    body[]{        ...,  markDefs[]{    ...,    _type == "link" => {          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    }  },  _type == "image" => {      ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }  },  _type == "youtube" => {    _type,    url  }    },    image{        ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }    },    links[]{          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    },  },        _type == "section-header" => {    _type,    _key,    padding,    colorVariant,    sectionWidth,    stackAlign,    tagLine,    title,    description,    link{          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    },  },        _type == "split-row" => {    _type,    _key,    padding,    colorVariant,    noGap,    splitColumns[]{        _type == "split-content" => {    _type,    _key,    sticky,    padding,    colorVariant,    tagLine,    title,    body[]{        ...,  markDefs[]{    ...,    _type == "link" => {          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    }  },  _type == "image" => {      ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }  },  _type == "youtube" => {    _type,    url  }    },    link{          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    },  },        _type == "split-cards-list" => {    _type,    _key,    list[]{      tagLine,      title,      body[]{          ...,  markDefs[]{    ...,    _type == "link" => {          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    }  },  _type == "image" => {      ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }  },  _type == "youtube" => {    _type,    url  }      },    },  },        _type == "split-image" => {    _type,    _key,    image{        ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }    },  },        _type == "split-info-list" => {    _type,    _key,    list[]{      image{          ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }      },      title,      body[]{          ...,  markDefs[]{    ...,    _type == "link" => {          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    }  },  _type == "image" => {      ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }  },  _type == "youtube" => {    _type,    url  }      },      tags[],    },  },    },  },        _type == "grid-row" => {    _type,    _key,    padding,    colorVariant,    gridColumns,    columns[]{        _type == "grid-card" => {    _type,    _key,    title,    excerpt,    image{        ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }    },    link{          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    },  },        _type == "pricing-card" => {    _type,    _key,    title,    tagLine,    price,    list[],    excerpt,    link{          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    },  },        _type == "grid-post" => {    _type,    _key,    post->{      title,      slug,      excerpt,      image{          ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }      },      categories[]->{        _id,        title,      },    },  },    },  },        _type == "carousel-gallery" => {    _type,    _key,    padding,    colorVariant,    heading,    demoUrl,    demoText,    items[]{        _type == "carousel-gallery-item" => {    _type,    _key,    title,    summary,    image{        ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }    },    link{          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    },  },    },  },        _type == "timeline-row" => {    _type,    _key,    padding,    colorVariant,    timelines[]{      title,      tagLine,      body[]{          ...,  markDefs[]{    ...,    _type == "link" => {          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    }  },  _type == "image" => {      ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }  },  _type == "youtube" => {    _type,    url  }      },    },  },        _type == "gallery-lightbox" => {    _type,    _key,    padding,    colorVariant,    tagLine,    title,    description,    columns,    spacing,    images[]{        ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  },      caption,    },  },        _type == "cta-1" => {    _type,    _key,    padding,    colorVariant,    sectionWidth,    stackAlign,    tagLine,    title,    body[]{        ...,  markDefs[]{    ...,    _type == "link" => {          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    }  },  _type == "image" => {      ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }  },  _type == "youtube" => {    _type,    url  }    },    links[]{          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    },  },    },    categories[]->{      title,      slug    },    _createdAt,    _updatedAt,    meta_title,    meta_description,    noindex,    ogImage {      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      },    }}
export type PROJECT_QUERYResult = {
  title: string | null;
  slug: Slug | null;
  excerpt: string | null;
  image: {
    asset: {
      _id: string;
      url: string | null;
      mimeType: string | null;
      metadata: {
        lqip: string | null;
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  blocks: Array<{
    _type: "carousel-gallery";
    _key: string;
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    heading: string | null;
    demoUrl: string | null;
    demoText: string | null;
    items: Array<{
      _type: "carousel-gallery-item";
      _key: string;
      title: string | null;
      summary: string | null;
      image: {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      } | null;
      link: {
        _key: null;
        _type: "link";
        isExternal?: boolean;
        internalLink?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "category";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "project";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "projects-page";
        };
        title?: string;
        href: string | "/" | "/projects" | null;
        target?: boolean;
        buttonVariant?: ButtonVariant;
      } | null;
    }> | null;
  } | {
    _type: "gallery-lightbox";
    _key: string;
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    tagLine: string | null;
    title: string | null;
    description: string | null;
    columns: "grid-cols-2" | "grid-cols-3" | "grid-cols-4" | null;
    spacing: "gap-2" | "gap-4" | "gap-6" | "gap-8" | null;
    images: Array<{
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      caption: string | null;
      _type: "image";
      _key: string;
    }> | null;
  } | {
    _type: "grid-row";
    _key: string;
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    gridColumns: "grid-cols-2" | "grid-cols-3" | "grid-cols-4" | null;
    columns: Array<{
      _type: "grid-card";
      _key: string;
      title: string | null;
      excerpt: string | null;
      image: {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      } | null;
      link: {
        _key: null;
        _type: "link";
        isExternal?: boolean;
        internalLink?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "category";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "project";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "projects-page";
        };
        title?: string;
        href: string | "/" | "/projects" | null;
        target?: boolean;
        buttonVariant?: ButtonVariant;
      } | null;
    } | {
      _type: "grid-post";
      _key: string;
      post: {
        title: string | null;
        slug: Slug | null;
        excerpt: string | null;
        image: {
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
        } | null;
        categories: Array<{
          _id: string;
          title: string | null;
        }> | null;
      } | null;
    } | {
      _type: "pricing-card";
      _key: string;
      title: string | null;
      tagLine: string | null;
      price: {
        value?: number;
        period?: string;
      } | null;
      list: Array<string> | null;
      excerpt: string | null;
      link: {
        _key: null;
        _type: "link";
        isExternal?: boolean;
        internalLink?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "category";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "project";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "projects-page";
        };
        title?: string;
        href: string | "/" | "/projects" | null;
        target?: boolean;
        buttonVariant?: ButtonVariant;
      } | null;
    }> | null;
  } | {
    _type: "hero-1";
    _key: string;
    tagLine: string | null;
    title: string | null;
    body: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
      listItem?: "bullet" | "number";
      markDefs: Array<{
        isExternal?: boolean;
        internalLink?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        href: string | "/" | null;
        target?: boolean;
        _type: "link";
        _key: string;
      }> | null;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      _key: string;
      _type: "code";
      language?: string;
      filename?: string;
      code?: string;
      highlightedLines?: Array<number>;
      markDefs: null;
    } | {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
      markDefs: null;
    } | {
      url: string | null;
      _type: "youtube";
      _key: string;
      markDefs: null;
    }> | null;
    image: {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
    links: Array<{
      _key: string;
      _type: "link";
      isExternal?: boolean;
      internalLink?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "category";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "project";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "projects-page";
      };
      title?: string;
      href: string | "/" | "/projects" | null;
      target?: boolean;
      buttonVariant?: ButtonVariant;
    }> | null;
  } | {
    _type: "section-header";
    _key: string;
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    sectionWidth: "default" | "narrow" | null;
    stackAlign: "center" | "left" | null;
    tagLine: string | null;
    title: string | null;
    description: string | null;
    link: null;
  } | {
    _type: "split-row";
    _key: string;
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    noGap: boolean | null;
    splitColumns: Array<{
      _type: "split-cards-list";
      _key: string;
      list: Array<{
        tagLine: string | null;
        title: string | null;
        body: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
          listItem?: "bullet" | "number";
          markDefs: Array<{
            isExternal?: boolean;
            internalLink?: {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "page";
            } | {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "post";
            };
            href: string | "/" | null;
            target?: boolean;
            _type: "link";
            _key: string;
          }> | null;
          level?: number;
          _type: "block";
          _key: string;
        } | {
          _key: string;
          _type: "code";
          language?: string;
          filename?: string;
          code?: string;
          highlightedLines?: Array<number>;
          markDefs: null;
        } | {
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
          _key: string;
          markDefs: null;
        } | {
          url: string | null;
          _type: "youtube";
          _key: string;
          markDefs: null;
        }> | null;
      }> | null;
    } | {
      _type: "split-content";
      _key: string;
      sticky: boolean | null;
      padding: SectionPadding | null;
      colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
      tagLine: string | null;
      title: string | null;
      body: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs: Array<{
          isExternal?: boolean;
          internalLink?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "page";
          } | {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "post";
          };
          href: string | "/" | null;
          target?: boolean;
          _type: "link";
          _key: string;
        }> | null;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        _key: string;
        _type: "code";
        language?: string;
        filename?: string;
        code?: string;
        highlightedLines?: Array<number>;
        markDefs: null;
      } | {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
        markDefs: null;
      } | {
        url: string | null;
        _type: "youtube";
        _key: string;
        markDefs: null;
      }> | null;
      link: {
        _key: null;
        _type: "link";
        isExternal?: boolean;
        internalLink?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "category";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "project";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "projects-page";
        };
        title?: string;
        href: string | "/" | "/projects" | null;
        target?: boolean;
        buttonVariant?: ButtonVariant;
      } | null;
    } | {
      _type: "split-image";
      _key: string;
      image: {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      } | null;
    } | {
      _type: "split-info-list";
      _key: string;
      list: Array<{
        image: {
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
        } | null;
        title: string | null;
        body: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
          listItem?: "bullet" | "number";
          markDefs: Array<{
            isExternal?: boolean;
            internalLink?: {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "page";
            } | {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "post";
            };
            href: string | "/" | null;
            target?: boolean;
            _type: "link";
            _key: string;
          }> | null;
          level?: number;
          _type: "block";
          _key: string;
        } | {
          _key: string;
          _type: "code";
          language?: string;
          filename?: string;
          code?: string;
          highlightedLines?: Array<number>;
          markDefs: null;
        } | {
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
          _key: string;
          markDefs: null;
        } | {
          url: string | null;
          _type: "youtube";
          _key: string;
          markDefs: null;
        }> | null;
        tags: Array<string> | null;
      }> | null;
    }> | null;
  } | {
    _type: "timeline-row";
    _key: string;
    padding: SectionPadding | null;
    colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
    timelines: Array<{
      title: string | null;
      tagLine: string | null;
      body: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs: Array<{
          isExternal?: boolean;
          internalLink?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "page";
          } | {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "post";
          };
          href: string | "/" | null;
          target?: boolean;
          _type: "link";
          _key: string;
        }> | null;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        _key: string;
        _type: "code";
        language?: string;
        filename?: string;
        code?: string;
        highlightedLines?: Array<number>;
        markDefs: null;
      } | {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
        markDefs: null;
      } | {
        url: string | null;
        _type: "youtube";
        _key: string;
        markDefs: null;
      }> | null;
    }> | null;
  } | {}> | null;
  categories: Array<{
    title: string | null;
    slug: Slug | null;
  }> | null;
  _createdAt: string;
  _updatedAt: string;
  meta_title: string | null;
  meta_description: string | null;
  noindex: boolean | null;
  ogImage: {
    asset: {
      _id: string;
      url: string | null;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
  } | null;
} | null;
// Variable: PROJECTS_QUERY
// Query: *[_type == "project" && defined(slug)] | order(_createdAt desc){    title,    slug,    excerpt,    image{        ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }    },    categories[]->{      title,      slug    },}
export type PROJECTS_QUERYResult = Array<{
  title: string | null;
  slug: Slug | null;
  excerpt: string | null;
  image: {
    asset: {
      _id: string;
      url: string | null;
      mimeType: string | null;
      metadata: {
        lqip: string | null;
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  categories: Array<{
    title: string | null;
    slug: Slug | null;
  }> | null;
}>;
// Variable: PROJECTS_PAGINATED_QUERY
// Query: {  "projects": *[_type == "project" && defined(slug)] | order(_createdAt desc) [$start...$end]{    title,    slug,    excerpt,    image{        ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }    },    categories[]->{      title,      slug    },  },  "total": count(*[_type == "project" && defined(slug)])}
export type PROJECTS_PAGINATED_QUERYResult = {
  projects: Array<{
    title: string | null;
    slug: Slug | null;
    excerpt: string | null;
    image: {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
    categories: Array<{
      title: string | null;
      slug: Slug | null;
    }> | null;
  }>;
  total: number;
};
// Variable: PROJECTS_SLUGS_QUERY
// Query: *[_type == "project" && defined(slug)]{slug}
export type PROJECTS_SLUGS_QUERYResult = Array<{
  slug: Slug | null;
}>;

// Source: ./sanity/queries/projects-page.ts
// Variable: PROJECTS_PAGE_QUERY
// Query: *[_type == "projects-page"][0]{  title,  subtitle,  heroImage{      ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }  },  meta_title,  meta_description,  noindex,  ogImage {    asset->{      _id,      url,      metadata {        dimensions {          width,          height        }      }    },  }}
export type PROJECTS_PAGE_QUERYResult = {
  title: string | null;
  subtitle: string | null;
  heroImage: {
    asset: {
      _id: string;
      url: string | null;
      mimeType: string | null;
      metadata: {
        lqip: string | null;
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  meta_title: string | null;
  meta_description: string | null;
  noindex: boolean | null;
  ogImage: {
    asset: {
      _id: string;
      url: string | null;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
  } | null;
} | null;

// Source: ./sanity/queries/settings.ts
// Variable: SETTINGS_QUERY
// Query: *[_type == "settings"][0]{  _type,  siteName,  logo{    dark{      ...,      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      }    },    light{      ...,      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      }    },    width,    height,  },  menuPosition,  headerButtons[]{    _key,    _type,    title,    buttonVariant,    target,        _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )  },  footerLinks[]{        _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      @.internalLink->_type == "project" => "/projects/" + @.internalLink->slug.current,      @.internalLink->_type == "projects-page" => "/projects",      @.internalLink->_type == "category" => "/categories/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )  },  socialLinks[]{    _key,    _type,    platform,    url  },  copyright,  projectsPerPage}
export type SETTINGS_QUERYResult = {
  _type: "settings";
  siteName: string | null;
  logo: {
    dark: {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    light: {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    width: number | null;
    height: number | null;
  } | null;
  menuPosition: "center" | "left" | "right" | null;
  headerButtons: Array<{
    _key: string;
    _type: null;
    title?: string;
    buttonVariant?: ButtonVariant;
    target?: boolean;
    isExternal?: boolean;
    internalLink?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "blog-page";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "category";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "page";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "post";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "project";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "projects-page";
    };
    href: string | "/" | "/projects" | null;
  }> | null;
  footerLinks: Array<{
    _key: string;
    _type: "link";
    isExternal?: boolean;
    internalLink?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "category";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "page";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "post";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "project";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "projects-page";
    };
    title?: string;
    href: string | "/" | "/projects" | null;
    target?: boolean;
    buttonVariant?: ButtonVariant;
  }> | null;
  socialLinks: Array<{
    _key: string;
    _type: "social-link";
    platform: "behance" | "devto" | "discord" | "dribbble" | "facebook" | "github" | "instagram" | "linkedin" | "medium" | "stackoverflow" | "tiktok" | "twitch" | "x" | "youtube" | null;
    url: string | null;
  }> | null;
  copyright: BlockContent | null;
  projectsPerPage: number | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n    *[_type == 'page'] | order(slug.current) {\n      'url': $baseUrl + select(slug.current == 'index' => '', '/' + slug.current),\n      'lastModified': _updatedAt,\n      'changeFrequency': 'daily',\n      'priority': select(\n        slug.current == 'index' => 1,\n        0.5\n      )\n    }\n  ": PagesQueryResult;
    "\n    *[_type == 'post'] | order(_updatedAt desc) {\n      'url': $baseUrl + '/blog/' + slug.current,\n      'lastModified': _updatedAt,\n      'changeFrequency': 'weekly',\n      'priority': 0.7\n    }\n  ": PostsQueryResult;
    "*[_type == \"blog-page\"][0]{\n  title,\n  subtitle,\n  heroImage{\n    \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n  },\n  meta_title,\n  meta_description,\n  noindex,\n  ogImage {\n    asset->{\n      _id,\n      url,\n      metadata {\n        dimensions {\n          width,\n          height\n        }\n      }\n    },\n  }\n}": BLOG_PAGE_QUERYResult;
    "*[_type == \"category\" && slug.current == $slug][0]{\n  title,\n  slug,\n  description,\n  image{\n    \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n  },\n  meta_title,\n  meta_description,\n  noindex,\n  ogImage {\n    asset->{\n      _id,\n      url,\n      metadata {\n        dimensions {\n          width,\n          height\n        }\n      }\n    },\n  }\n}": CATEGORY_QUERYResult;
    "{\n  \"category\": *[_type == \"category\" && slug.current == $slug][0]{\n    title,\n    slug,\n    description,\n    image{\n      \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n    },\n    meta_title,\n    meta_description,\n    noindex,\n    ogImage {\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n    }\n  },\n  \"projects\": *[_type == \"project\" && defined(slug) && references(*[_type == \"category\" && slug.current == $slug][0]._id)] | order(_createdAt desc) [$start...$end]{\n    title,\n    slug,\n    excerpt,\n    image{\n      \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n    },\n    categories[]->{\n      title,\n      slug\n    },\n  },\n  \"total\": count(*[_type == \"project\" && defined(slug) && references(*[_type == \"category\" && slug.current == $slug][0]._id)]),\n  \"firstProjectImage\": *[_type == \"project\" && defined(slug) && references(*[_type == \"category\" && slug.current == $slug][0]._id)] | order(_createdAt desc) [0].image{\n    \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n  }\n}": CATEGORY_PROJECTS_PAGINATED_QUERYResult;
    "*[_type == \"category\" && defined(slug)]{slug}": CATEGORIES_SLUGS_QUERYResult;
    "\n  *[_type == \"navigation\"]{\n    _type,\n    _key,\n    links[]{\n      _key,\n      _type,\n      title,\n      buttonVariant,\n      target,\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    }\n  }\n": NAVIGATION_QUERYResult;
    "\n  *[_type == \"page\" && slug.current == $slug][0]{\n    blocks[]{\n      \n  _type == \"hero-1\" => {\n    _type,\n    _key,\n    tagLine,\n    title,\n    body[]{\n      \n  ...,\n  markDefs[]{\n    ...,\n    _type == \"link\" => {\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    }\n  },\n  _type == \"image\" => {\n    \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n  },\n  _type == \"youtube\" => {\n    _type,\n    url\n  }\n\n    },\n    image{\n      \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n    },\n    links[]{\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    },\n  }\n,\n      \n  _type == \"hero-2\" => {\n    _type,\n    _key,\n    tagLine,\n    title,\n    body[]{\n      \n  ...,\n  markDefs[]{\n    ...,\n    _type == \"link\" => {\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    }\n  },\n  _type == \"image\" => {\n    \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n  },\n  _type == \"youtube\" => {\n    _type,\n    url\n  }\n\n    },\n    links[]{\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    },\n  }\n,\n      \n  _type == \"hero-3\" => {\n    _type,\n    _key,\n    backgroundImage{\n      \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n    },\n    title,\n    description,\n    links[]{\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    },\n  }\n,\n      \n  _type == \"section-header\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    sectionWidth,\n    stackAlign,\n    tagLine,\n    title,\n    description,\n    link{\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    },\n  }\n,\n      \n  _type == \"split-row\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    noGap,\n    splitColumns[]{\n      \n  _type == \"split-content\" => {\n    _type,\n    _key,\n    sticky,\n    padding,\n    colorVariant,\n    tagLine,\n    title,\n    body[]{\n      \n  ...,\n  markDefs[]{\n    ...,\n    _type == \"link\" => {\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    }\n  },\n  _type == \"image\" => {\n    \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n  },\n  _type == \"youtube\" => {\n    _type,\n    url\n  }\n\n    },\n    link{\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    },\n  }\n,\n      \n  _type == \"split-cards-list\" => {\n    _type,\n    _key,\n    list[]{\n      tagLine,\n      title,\n      body[]{\n        \n  ...,\n  markDefs[]{\n    ...,\n    _type == \"link\" => {\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    }\n  },\n  _type == \"image\" => {\n    \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n  },\n  _type == \"youtube\" => {\n    _type,\n    url\n  }\n\n      },\n    },\n  }\n,\n      \n  _type == \"split-image\" => {\n    _type,\n    _key,\n    image{\n      \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n    },\n  }\n,\n      \n  _type == \"split-info-list\" => {\n    _type,\n    _key,\n    list[]{\n      image{\n        \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n      },\n      title,\n      body[]{\n        \n  ...,\n  markDefs[]{\n    ...,\n    _type == \"link\" => {\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    }\n  },\n  _type == \"image\" => {\n    \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n  },\n  _type == \"youtube\" => {\n    _type,\n    url\n  }\n\n      },\n      tags[],\n    },\n  }\n,\n    },\n  }\n,\n      \n  _type == \"grid-row\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    gridColumns,\n    columns[]{\n      \n  _type == \"grid-card\" => {\n    _type,\n    _key,\n    title,\n    excerpt,\n    image{\n      \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n    },\n    link{\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    },\n  }\n,\n      \n  _type == \"pricing-card\" => {\n    _type,\n    _key,\n    title,\n    tagLine,\n    price,\n    list[],\n    excerpt,\n    link{\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    },\n  }\n,\n      \n  _type == \"grid-post\" => {\n    _type,\n    _key,\n    post->{\n      title,\n      slug,\n      excerpt,\n      image{\n        \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n      },\n      categories[]->{\n        _id,\n        title,\n      },\n    },\n  }\n,\n    },\n  }\n,\n      \n  _type == \"carousel-1\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    size,\n    orientation,\n    indicators,\n    images[]{\n      \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n    },\n  }\n,\n      \n  _type == \"carousel-2\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    testimonial[]->{\n      _id,\n      name,\n      title,\n      image{\n        \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n      },\n      body[]{\n        \n  ...,\n  markDefs[]{\n    ...,\n    _type == \"link\" => {\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    }\n  },\n  _type == \"image\" => {\n    \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n  },\n  _type == \"youtube\" => {\n    _type,\n    url\n  }\n\n      },\n      rating,\n    },\n  }\n,\n      \n  _type == \"carousel-gallery\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    heading,\n    demoUrl,\n    demoText,\n    items[]{\n      \n  _type == \"carousel-gallery-item\" => {\n    _type,\n    _key,\n    title,\n    summary,\n    image{\n      \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n    },\n    link{\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    },\n  }\n,\n    },\n  }\n,\n      \n  _type == \"timeline-row\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    timelines[]{\n      title,\n      tagLine,\n      body[]{\n        \n  ...,\n  markDefs[]{\n    ...,\n    _type == \"link\" => {\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    }\n  },\n  _type == \"image\" => {\n    \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n  },\n  _type == \"youtube\" => {\n    _type,\n    url\n  }\n\n      },\n    },\n  }\n,\n      \n  _type == \"timeline-2\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    tagLine,\n    title,\n    description,\n    headerLinks[]{\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    },\n    phases[]{\n      _key,\n      phaseNumber,\n      title,\n      subtitle,\n      description,\n      image{\n        \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n      },\n      links[]{\n        \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n      },\n    },\n  }\n,\n      \n  _type == \"cta-1\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    sectionWidth,\n    stackAlign,\n    tagLine,\n    title,\n    body[]{\n      \n  ...,\n  markDefs[]{\n    ...,\n    _type == \"link\" => {\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    }\n  },\n  _type == \"image\" => {\n    \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n  },\n  _type == \"youtube\" => {\n    _type,\n    url\n  }\n\n    },\n    links[]{\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    },\n  }\n,\n      \n  _type == \"logo-cloud-1\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    title,\n    images[]{\n      \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n    },\n  }\n,\n      \n  _type == \"faqs\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    faqs[]->{\n      _id,\n      title,\n      body[]{\n        \n  ...,\n  markDefs[]{\n    ...,\n    _type == \"link\" => {\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    }\n  },\n  _type == \"image\" => {\n    \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n  },\n  _type == \"youtube\" => {\n    _type,\n    url\n  }\n\n      },\n    },\n  }\n,\n      \n  _type == \"form-newsletter\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    stackAlign,\n    consentText,\n    buttonText,\n    successMessage,\n  }\n,\n      \n  _type == \"all-posts\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n  }\n,\n      \n  _type == \"featured-projects\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    title,\n    showViewAllButton,\n    viewAllButtonText,\n    viewAllButtonVariant,\n    projects[]->{\n      title,\n      slug,\n      excerpt,\n      image{\n        \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n      },\n      categories[]->{\n        title,\n        slug\n      },\n    },\n  }\n,\n      \n  _type == \"gallery-lightbox\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    tagLine,\n    title,\n    description,\n    columns,\n    spacing,\n    images[]{\n      \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n,\n      caption,\n    },\n  }\n,\n      \n  _type == \"features-cards\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    tagLine,\n    title,\n    description,\n    layout,\n    cards[]{\n      \n  _type == \"features-card\" => {\n    _type,\n    _key,\n    mediaType,\n    image{\n      \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n    },\n    icon,\n    tagLine,\n    title,\n    description,\n    links[]{\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    },\n  }\n\n    },\n  }\n,\n      \n  _type == \"team-1\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    heading,\n    description,\n    members[]{\n      _key,\n      name,\n      role,\n      avatar{\n        \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n      },\n      socialLinks[]{\n        \n  _key,\n  platform,\n  url\n\n      },\n    },\n  }\n,\n      \n  _type == \"content-block\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    sectionWidth,\n    stackAlign,\n    tagLine,\n    title,\n    content[]{\n      \n  ...,\n  markDefs[]{\n    ...,\n    _type == \"link\" => {\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    }\n  },\n  _type == \"image\" => {\n    \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n  },\n  _type == \"youtube\" => {\n    _type,\n    url\n  }\n\n    },\n  }\n,\n    },\n    meta_title,\n    meta_description,\n    noindex,\n    ogImage {\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n    }\n  }\n": PAGE_QUERYResult;
    "*[_type == \"page\" && defined(slug)]{slug}": PAGES_SLUGS_QUERYResult;
    "*[_type == \"post\" && slug.current == $slug][0]{\n    title,\n    slug,\n    image{\n      \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n    },\n    body[]{\n      \n  ...,\n  markDefs[]{\n    ...,\n    _type == \"link\" => {\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    }\n  },\n  _type == \"image\" => {\n    \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n  },\n  _type == \"youtube\" => {\n    _type,\n    url\n  }\n\n    },\n    author->{\n      name,\n      image {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        },\n        alt\n      }\n    },\n    _createdAt,\n    _updatedAt,\n    meta_title,\n    meta_description,\n    noindex,\n    ogImage {\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n    }\n}": POST_QUERYResult;
    "*[_type == \"post\" && defined(slug)] | order(_createdAt desc){\n    title,\n    slug,\n    excerpt,\n    image{\n      \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n    },\n}": POSTS_QUERYResult;
    "{\n  \"posts\": *[_type == \"post\" && defined(slug)] | order(_createdAt desc) [$start...$end]{\n    title,\n    slug,\n    excerpt,\n    image{\n      \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n    },\n  },\n  \"total\": count(*[_type == \"post\" && defined(slug)])\n}": POSTS_PAGINATED_QUERYResult;
    "*[_type == \"post\" && defined(slug)]{slug}": POSTS_SLUGS_QUERYResult;
    "*[_type == \"project\" && slug.current == $slug][0]{\n    title,\n    slug,\n    excerpt,\n    image{\n      \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n    },\n    blocks[]{\n      \n  _type == \"hero-1\" => {\n    _type,\n    _key,\n    tagLine,\n    title,\n    body[]{\n      \n  ...,\n  markDefs[]{\n    ...,\n    _type == \"link\" => {\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    }\n  },\n  _type == \"image\" => {\n    \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n  },\n  _type == \"youtube\" => {\n    _type,\n    url\n  }\n\n    },\n    image{\n      \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n    },\n    links[]{\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    },\n  }\n,\n      \n  _type == \"section-header\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    sectionWidth,\n    stackAlign,\n    tagLine,\n    title,\n    description,\n    link{\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    },\n  }\n,\n      \n  _type == \"split-row\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    noGap,\n    splitColumns[]{\n      \n  _type == \"split-content\" => {\n    _type,\n    _key,\n    sticky,\n    padding,\n    colorVariant,\n    tagLine,\n    title,\n    body[]{\n      \n  ...,\n  markDefs[]{\n    ...,\n    _type == \"link\" => {\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    }\n  },\n  _type == \"image\" => {\n    \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n  },\n  _type == \"youtube\" => {\n    _type,\n    url\n  }\n\n    },\n    link{\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    },\n  }\n,\n      \n  _type == \"split-cards-list\" => {\n    _type,\n    _key,\n    list[]{\n      tagLine,\n      title,\n      body[]{\n        \n  ...,\n  markDefs[]{\n    ...,\n    _type == \"link\" => {\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    }\n  },\n  _type == \"image\" => {\n    \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n  },\n  _type == \"youtube\" => {\n    _type,\n    url\n  }\n\n      },\n    },\n  }\n,\n      \n  _type == \"split-image\" => {\n    _type,\n    _key,\n    image{\n      \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n    },\n  }\n,\n      \n  _type == \"split-info-list\" => {\n    _type,\n    _key,\n    list[]{\n      image{\n        \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n      },\n      title,\n      body[]{\n        \n  ...,\n  markDefs[]{\n    ...,\n    _type == \"link\" => {\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    }\n  },\n  _type == \"image\" => {\n    \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n  },\n  _type == \"youtube\" => {\n    _type,\n    url\n  }\n\n      },\n      tags[],\n    },\n  }\n,\n    },\n  }\n,\n      \n  _type == \"grid-row\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    gridColumns,\n    columns[]{\n      \n  _type == \"grid-card\" => {\n    _type,\n    _key,\n    title,\n    excerpt,\n    image{\n      \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n    },\n    link{\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    },\n  }\n,\n      \n  _type == \"pricing-card\" => {\n    _type,\n    _key,\n    title,\n    tagLine,\n    price,\n    list[],\n    excerpt,\n    link{\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    },\n  }\n,\n      \n  _type == \"grid-post\" => {\n    _type,\n    _key,\n    post->{\n      title,\n      slug,\n      excerpt,\n      image{\n        \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n      },\n      categories[]->{\n        _id,\n        title,\n      },\n    },\n  }\n,\n    },\n  }\n,\n      \n  _type == \"carousel-gallery\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    heading,\n    demoUrl,\n    demoText,\n    items[]{\n      \n  _type == \"carousel-gallery-item\" => {\n    _type,\n    _key,\n    title,\n    summary,\n    image{\n      \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n    },\n    link{\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    },\n  }\n,\n    },\n  }\n,\n      \n  _type == \"timeline-row\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    timelines[]{\n      title,\n      tagLine,\n      body[]{\n        \n  ...,\n  markDefs[]{\n    ...,\n    _type == \"link\" => {\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    }\n  },\n  _type == \"image\" => {\n    \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n  },\n  _type == \"youtube\" => {\n    _type,\n    url\n  }\n\n      },\n    },\n  }\n,\n      \n  _type == \"gallery-lightbox\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    tagLine,\n    title,\n    description,\n    columns,\n    spacing,\n    images[]{\n      \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n,\n      caption,\n    },\n  }\n,\n      \n  _type == \"cta-1\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    sectionWidth,\n    stackAlign,\n    tagLine,\n    title,\n    body[]{\n      \n  ...,\n  markDefs[]{\n    ...,\n    _type == \"link\" => {\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    }\n  },\n  _type == \"image\" => {\n    \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n  },\n  _type == \"youtube\" => {\n    _type,\n    url\n  }\n\n    },\n    links[]{\n      \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n    },\n  }\n,\n    },\n    categories[]->{\n      title,\n      slug\n    },\n    _createdAt,\n    _updatedAt,\n    meta_title,\n    meta_description,\n    noindex,\n    ogImage {\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n    }\n}": PROJECT_QUERYResult;
    "*[_type == \"project\" && defined(slug)] | order(_createdAt desc){\n    title,\n    slug,\n    excerpt,\n    image{\n      \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n    },\n    categories[]->{\n      title,\n      slug\n    },\n}": PROJECTS_QUERYResult;
    "{\n  \"projects\": *[_type == \"project\" && defined(slug)] | order(_createdAt desc) [$start...$end]{\n    title,\n    slug,\n    excerpt,\n    image{\n      \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n    },\n    categories[]->{\n      title,\n      slug\n    },\n  },\n  \"total\": count(*[_type == \"project\" && defined(slug)])\n}": PROJECTS_PAGINATED_QUERYResult;
    "*[_type == \"project\" && defined(slug)]{slug}": PROJECTS_SLUGS_QUERYResult;
    "*[_type == \"projects-page\"][0]{\n  title,\n  subtitle,\n  heroImage{\n    \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n  },\n  meta_title,\n  meta_description,\n  noindex,\n  ogImage {\n    asset->{\n      _id,\n      url,\n      metadata {\n        dimensions {\n          width,\n          height\n        }\n      }\n    },\n  }\n}": PROJECTS_PAGE_QUERYResult;
    "*[_type == \"settings\"][0]{\n  _type,\n  siteName,\n  logo{\n    dark{\n      ...,\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      }\n    },\n    light{\n      ...,\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      }\n    },\n    width,\n    height,\n  },\n  menuPosition,\n  headerButtons[]{\n    _key,\n    _type,\n    title,\n    buttonVariant,\n    target,\n    \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n  },\n  footerLinks[]{\n    \n    _key,\n    ...,\n    \"href\": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == \"index\" => \"/\",\n      @.internalLink->_type == \"post\" => \"/blog/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"project\" => \"/projects/\" + @.internalLink->slug.current,\n      @.internalLink->_type == \"projects-page\" => \"/projects\",\n      @.internalLink->_type == \"category\" => \"/categories/\" + @.internalLink->slug.current,\n      \"/\" + @.internalLink->slug.current\n    )\n\n  },\n  socialLinks[]{\n    _key,\n    _type,\n    platform,\n    url\n  },\n  copyright,\n  projectsPerPage\n}": SETTINGS_QUERYResult;
  }
}
